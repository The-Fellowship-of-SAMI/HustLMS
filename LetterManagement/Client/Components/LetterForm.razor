@using LetterManagement.Shared.Models;
@using LetterManagement.Client.StateContainer
@inject UserState UserState;

@if (Template is not null)
{
    <MudCard Class="mx-auto pa-6">
        <MudText Class="gap-4" Typo="Typo.h2" Align="Align.Center">@Template.Name</MudText>
        <MudDivider/>
        <MudText Typo="Typo.h6" Class="gap-3">Kính gửi: @Template.Receiver</MudText>

        @if (UserState.Student is not null)
        {
            <MudText>Tên sinh viên: @UserState.Student.Name</MudText>
            <MudText>Mã số sinh viên: @UserState.Student.StudentId</MudText>
            <MudText>Khóa: @UserState.Student.SchoolYear</MudText>
            <MudText>Viện quản lý: @UserState.Student.School.Name</MudText>
        }
        else
        {
            <MudAlert>Tài khoản của sinh viên chưa tồn tại trong hệ thống!</MudAlert>
        }
        <MudForm>
        @foreach(var additionalField in Template.AdditionalFields)
        {
            if (additionalField.FieldType == FieldTypes.Checkbox)
            {
                <MudText >@additionalField.FieldName</MudText>
                var childFields = Template.AdditionalFields.
                    Where(x => x.GroupFieldId == additionalField.Id);
                foreach (var child in childFields)
                {
                    var letterAdditionalFieldInGroup = Letter?.LetterAdditionalFields.SingleOrDefault(x => x.LetterTemplateAdditionalFieldId == additionalField.Id);
                    if (letterAdditionalFieldInGroup is null)
                    {
                        letterAdditionalFieldInGroup = new LetterAdditionalField()
                        {
                            LetterTemplateAdditionalFieldId = additionalField.Id
                        };
                    }
                    <MudCheckBox T="bool" Size="Size.Medium" Label="@child.FieldName" 
                                 bind-Checked="letterAdditionalFieldInGroup.FieldValueBool" CheckedChanged="() => updateAdditionalField(letterAdditionalFieldInGroup)">
                    @if (letterAdditionalFieldInGroup.FieldValueBool == false)
                    {
                        @if (child.FieldType== FieldTypes.Text)
                        {
                            <MudTextField T="string" Margin="Margin.Dense" Variant="Variant.Outlined" 
                                          bind-Value="letterAdditionalFieldInGroup.FieldValueString"/>
                        }
                        @if (child.FieldType == FieldTypes.Datetime )
                        {
                            <MudTextField T="DateTime?" Format="yyyy-MM-dd" InputType="InputType.Date" 
                                          bind-Value="letterAdditionalFieldInGroup.FieldValueDateTime" />
                        }
                        
                    }
                    </MudCheckBox>
                }
            }
            
            var letterAdditionalField = Letter?.LetterAdditionalFields.SingleOrDefault(x => x.LetterTemplateAdditionalFieldId == additionalField.Id);
            if (letterAdditionalField is null)
            {
                letterAdditionalField = new LetterAdditionalField() { LetterTemplateAdditionalFieldId = additionalField.Id };
            }
            if (additionalField is { FieldType: FieldTypes.Text,GroupFieldId: null })
            {
                <MudTextField T="string" Label="@additionalField.FieldName" bind-Value="letterAdditionalField.FieldValueString"></MudTextField>
            }
            if (additionalField is { FieldType: FieldTypes.Datetime,GroupFieldId: null })
            {
                <MudTextField Style="width: fit-content" T="DateTime?" Format="yyyy-MM-dd" Label="@additionalField.FieldName"  bind-Value="letterAdditionalField.FieldValueDateTime"  InputType="InputType.Date"></MudTextField>
            }
        }
        </MudForm>
        <MudText Typo="Typo.body1">Ghi chú: @Template.Description</MudText>

    </MudCard>
}


@code {
    [Parameter]
    public LetterTemplate? Template { get; set; }

    [Parameter]
    public Letter Letter { get; set; } = new Letter();

    public void updateAdditionalField(LetterAdditionalField newField)
    {
        var fields = Letter?.LetterAdditionalFields.Where(x => x.LetterTemplateAdditionalFieldId == newField.LetterTemplateAdditionalFieldId).ToList();

        foreach (var field in fields)
        {
            field.FieldValueBool = newField.FieldValueBool;
            field.FieldValueString = newField.FieldValueString;
            field.FieldValueDateTime = newField.FieldValueDateTime;
        }
    }
    
}

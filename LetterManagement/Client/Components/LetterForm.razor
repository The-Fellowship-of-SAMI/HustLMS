@using LetterManagement.Shared.Models;
@using LetterManagement.Client.StateContainer
@using LetterManagement.Server.Dtos
@inject UserState UserState;
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager;

@* @inject DialogService DialogService; *@
@if (Template is not null)
{
    <MudPaper Width="70%" Class="mx-auto">
        <MudCard Class="mx-auto pa-6 rounded" Elevation="3">
            <MudCardHeader>
                <MudText Class="gap-4 ma-auto" Typo="Typo.h4" Align="Align.Center">@Template.Name</MudText>
            </MudCardHeader>

            <MudCardContent>
                <MudForm Class="pa-2" @bind-IsValid="_isFormValid">
                    <MudText Typo="Typo.h6" Class="gap-3 pb-4">Kính gửi: @Template.Receiver</MudText>

                    <DepartmentSelect @bind-SelectedDepartments="SelectedDepartments" Departments="Template.Departments"></DepartmentSelect>

                    @if (UserState.Student is not null)
                    {
                        <MudGrid Class="pl-20 pr-20" Spacing="1">
                            <MudItem xs="6" sm="2">
                                <MudText>Tên sinh viên:</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="4">
                                <MudText>@UserState.Student.Name</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="2">
                                <MudText>Mã số sinh viên:</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="4">
                                <MudText>@UserState.Student.StudentId</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="2">
                                <MudText>Khóa:</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="4">
                                <MudText>@UserState.Student.SchoolYear</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="2">
                                <MudText>Viện quản lý:</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="4">
                                <MudText>@UserState.Student.School.Name</MudText>
                            </MudItem>
                        </MudGrid>
                    }
                    else
                    {
                        <MudAlert>Tài khoản của sinh viên chưa tồn tại trong hệ thống!</MudAlert>
                    }

                    @foreach (var additionalField in Template.AdditionalFields)
                    {
                        if (additionalField.FieldType == FieldTypes.Checkbox)
                        {
                            <MudText>@additionalField.FieldName</MudText>
                            var childFields = Template.AdditionalFields.
                                Where(x => x.GroupFieldId == additionalField.Id);
                            foreach (var child in childFields)
                            {
                                var letterAdditionalFieldInGroup = FindOrCreateAdditionalField(child.Id);
                                <MudStack Row="true">

                                    <MudCheckBox T="bool" Class="ma-auto" Size="Size.Medium" Label="@child.FieldName"
                                                 @bind-Checked="letterAdditionalFieldInGroup.FieldValueBool">
                                    </MudCheckBox>

                                    @if (child.FieldType == FieldTypes.Text)
                                    {
                                        <MudTextField Class="pb-3" T="string" Margin="Margin.Dense"
                                                      @bind-Value="letterAdditionalFieldInGroup.FieldValueString"/>
                                    }
                                    @if (child.FieldType == FieldTypes.Datetime)
                                    {
                                        <MudTextField Class="ma-auto" T="DateTime?" Format="yyyy-MM-dd" InputType="InputType.Date"
                                                      bind-Value="letterAdditionalFieldInGroup.FieldValueDateTime"/>
                                    }

                                </MudStack>
                            }
                        }
                        var letterAdditionalField = FindOrCreateAdditionalField(additionalField.Id);
                        if (additionalField is { FieldType: FieldTypes.Text, GroupFieldId: null })
                        {
                            <MudTextField T="string" Label="@additionalField.FieldName"
                                          @bind-Value="@letterAdditionalField.FieldValueString"
                                          Required="true"
                                          RequiredError="Mục này không được để trống">
                            </MudTextField>
                        }
                        if (additionalField is { FieldType: FieldTypes.Datetime, GroupFieldId: null })
                        {
                            <MudStack Row="true">
                                <MudText Class="ma-auto">@additionalField.FieldName</MudText>
                                <MudDatePicker Label="dd/MM/yyyy" HelperText="Click nút lịch để chọn ngày"
                                               PickerVariant="PickerVariant.Dialog" Editable="true"
                                               Mask="@(new DateMask("dd.MM.yyyy"))"
                                               DateFormat="dd.MM.yyyy" Placeholder="@DateTime.Today.ToShortDateString()"
                                               @bind-Date="letterAdditionalField.FieldValueDateTime"
                                               Required="true"
                                               RequiredError="Mục này không được để trống"/>
                            </MudStack>
                        }
                    }
                    <MudText Typo="Typo.body1" Class="pt-8">Ghi chú: @Template.Description</MudText>
                </MudForm>

            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@_submitLetter" Disabled="!_isFormValid">
                    Gửi đơn
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudPaper>
}


@code {

    [Parameter]
    public LetterTemplate? Template { get; set; }

    [Parameter]
    public Letter? Letter { get; set; }

    private List<Department> SelectedDepartments { get; set; } = new List<Department>();

    private bool _isFormValid = true;

    protected override void OnInitialized()
    {
        UserState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UserState.OnChange -= StateHasChanged;
    }


    private async Task _submitLetter()
    {
        try
        {
            var createLetterDto = new CreateLetterDto()
            {
                StudentId = this.Letter!.Student!.StudentId,
                LetterTemplateId = Template!.Id.ToString(),
                LetterAdditionalFields = this.Letter!.LetterAdditionalFields,
                DepartmentsId = SelectedDepartments.Select(x => x.Id).ToList()
            };

            foreach (var department in SelectedDepartments)
            {
                Console.WriteLine(department.Name);
            }
            var result = await HttpClient.PostAsJsonAsync("/api/letters", createLetterDto);


            if (result.IsSuccessStatusCode) NavigationManager.NavigateTo("/studentLetterList");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
    // await DialogService.ShowMessageBox("error", "Chưa thể gửi đơn do có lỗi hệ thống, thử lại sau");
    // StateHasChanged();
        }
    }

    private LetterAdditionalField? FindOrCreateAdditionalField(Guid letterTemplateAdditionalFieldId)
    {
        if (Letter is null) return null;
        foreach (var additionalField in Letter.LetterAdditionalFields)
        {
            if (additionalField.LetterTemplateAdditionalFieldId == letterTemplateAdditionalFieldId)
            {
                return additionalField;
            }
        }
        var newLetterAdditionalField = new LetterAdditionalField()
        {
            LetterTemplateAdditionalFieldId = letterTemplateAdditionalFieldId
        };
        this.Letter.LetterAdditionalFields.Add(newLetterAdditionalField);
        return newLetterAdditionalField;
    }

}
@page "/login"
@using System.ComponentModel.DataAnnotations
@using LetterManagement.Client.StateContainer
@using LetterManagement.Shared.Dtos
@using LetterManagement.Shared.Models
@inject UserState UserState
@inject TokenState TokenState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@layout EmptyLayout



<EditForm Model="@loginForm" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudStack>
    <MudText Typo="Typo.h4">Đăng nhập hệ thống</MudText>

    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="loginForm.Email" For="@(() => loginForm.Email)"/>
                <MudTextField Label="Mật khẩu" HelperText="Tài khoản Office365" Class="mt-3"
                              @bind-Value="loginForm.Password" For="@(() => loginForm.Password)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" 
                           Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           Class="ml-auto">Đăng nhập</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudStack>
</EditForm>


@code {
    LoginForm loginForm = new LoginForm();
    bool success;

    public class LoginForm
    {

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string Password { get; set; }

    }

    private async Task OnValidSubmit(EditContext context)
    {
        success = true;
        var loginResult = await ProcessLogin();

        if (!loginResult)
        {
            Console.WriteLine("Failed to login");
        }
        StateHasChanged();
        NavigationManager.NavigateTo("/");

    }

    private async Task<bool> ProcessLogin()
    {
        var loginResponse = await HttpClient.PostAsJsonAsync("api/account/login", loginForm);
        if (!loginResponse.IsSuccessStatusCode)
        {
            return false;
        }
        var appUserDto = await loginResponse.Content.ReadFromJsonAsync<AppUserDto>();

        if (appUserDto is null)
        {
            return false;
        }
        var tokenState = TokenState.SetTokenState(appUserDto);
        await this.localStorage.SetItemAsync<TokenState>("token", tokenState);

        if (appUserDto.Role == Roles.Student)
        {
            var student = await HttpClient.GetFromJsonAsync<Student>($"api/students/{appUserDto.UserId}");
            if (student is not null)
            {
                this.UserState.Student = student;
            }
            
        }
        if (appUserDto.Role == Roles.Manager || appUserDto.Role == Roles.SuperManager)
        {
            var manager = await HttpClient.GetFromJsonAsync<Manager>($"api/manager/{appUserDto.UserId}");
            if (manager is not null)
            {
                this.UserState.Manager = manager;
            }
        }
        await this.localStorage.SetItemAsync<UserState>("user", this.UserState);
        return true;
    }

}
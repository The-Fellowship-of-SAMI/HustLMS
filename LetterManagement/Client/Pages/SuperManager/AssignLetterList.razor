@using LetterManagement.Shared.Models
@using MudBlazor.Extensions
@using LetterManagement.Shared.Dtos
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@if (Letters is null)
{
    <MudProgressLinear Color="Color.Info" Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-2 ma-auto rounded" Elevation="0" Width="60%">
        <MudStack Class="ma-auto">
            @foreach (var letter in Letters)
            {
                if (letter is not null)
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">@letter?.Template?.Name</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (letter.Student is not null)
                            {
                                <MudText>Sinh viên:@letter.Student.Name</MudText>
                                <MudText>MSSV: @letter.Student.StudentId</MudText>
                                <MudText>Khóa: @letter.Student.SchoolYear</MudText>
                            }
                            <MudText>Đơn vị:</MudText>
                            <MudStack Spacing="0">
                                @foreach (var department in letter.Departments)
                                {
                                    <MudText Class="ml-4">@department.Name</MudText>
                                }
                                @if (letter.Managers is not null)
                                {
                                    @foreach (var manager in letter.Managers)
                                    {
                                        <MudText Align="Align.Right">Người phụ trách: @manager.Name</MudText>
                                    }
                                }
                            </MudStack>
                            <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                            <MudText GutterBottom="true" Class="pb-1">Trạng thái: @letter.State</MudText>

                            <MudText GutterBottom="true">Ngày gửi: @letter.CreatedAt.ToString("dd/MM/yyyy")</MudText>
                            @if (letter.ReceivedDate.HasValue)
                            {
                                <MudText GutterBottom="true">Ngày nhận: @letter.ReceivedDate.Value.ToString("dd/MM/yyyy")</MudText>
                            }
                            @if (letter.FinishedDate.HasValue)
                            {
                                <MudText GutterBottom="true"> Hoàn thành: @letter.FinishedDate.Value.ToString("dd/MM/yyyy")</MudText>
                            }
                        </MudCardContent>
                        <MudCardActions Class="pb-3">
                            <MudSelect T="Manager" ToStringFunc="@converter" ValueChanged="(manager)=>OnSelectManagerChange(manager, letter)"
                           Label="Chọn người phụ trách">
                                @foreach (var manager in Managers)
                                {
                                    <MudSelectItem Value="manager"></MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardActions>


                    </MudCard>
                }
            }
        </MudStack>
    </MudPaper>
}
@code {
    [Parameter]
    public Guid DepartmentId { get; set; }
    [Parameter]
    public List<Manager> Managers { get; set; } = new List<Manager>();
    [Parameter]
    public IEnumerable<Letter>? Letters { get; set; } = null;

    public bool IsAssignTaskButtonClicked { get; set; }

    private void navigate(Guid letterId)
    {
        NavigationManager.NavigateTo($@"/LetterDetail/{letterId.ToString()}");
    }
    public void ToggleOpen()
    {
        IsAssignTaskButtonClicked = !IsAssignTaskButtonClicked;
    }

    Func<Manager, string> converter = p => p?.Name;

    public async void OnSelectManagerChange(Manager? manager, Letter letter)
    {
        Console.WriteLine("managerName=", manager.Name);
        Console.WriteLine("letterId =", letter.Id);
        if (manager is null)
        {
            letter.Managers.RemoveAll(x => x.Department!.Id == DepartmentId);
        }
        letter.Managers.Add(manager);

        await this.HttpClient.PutAsJsonAsync<UpdateLetterManagerDto>($"/api/Letters/managers", new UpdateLetterManagerDto()
        {
            DepartmentId = DepartmentId,
            LetterId = letter.Id,
            ManagerId = letter.Managers.Select(x => x.Id).ToList()
        });
    }

}
@using LetterManagement.Shared.Models
@using LetterManagement.Shared.Dtos
@using MudBlazor.Extensions
@using LetterManagement.Client.StateContainer
@using LetterManagement.Shared.Dtos
@inject HttpClient Http
@inject TokenState TokenState
@page "/LetterDetail/{LetterId}"

@if (Letter is null)
{
    <MudAlert Severity="Severity.Error">Không tồn tại </MudAlert>
}
else
{
    <MudPaper Class="mx-auto pa-6 rounded" Elevation="3" Width="72%">
        <MudText Class="gap-4 ma-auto pb-3" Typo="Typo.h4" Align="Align.Center">@Letter.Template?.Name</MudText>
        <MudDivider />
        <MudText Typo="Typo.h6" Class="gap-3">Kính gửi: @Letter.Template?.Receiver</MudText>

        @if (Letter.Student is not null)
        {
            <MudGrid Class="ma-auto pa-4" Spacing="1">
                <MudItem xs="6" sm="2">
                    <MudText>Tên sinh viên:</MudText>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudText>@Letter.Student.Name</MudText>
                </MudItem>
                <MudItem xs="6" sm="2">
                    <MudText>Mã số sinh viên:</MudText>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudText>@Letter.Student.StudentId</MudText>
                </MudItem>
                <MudItem xs="6" sm="2">
                    <MudText>Khóa:</MudText>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudText>@Letter.Student.SchoolYear</MudText>
                </MudItem>
                <MudItem xs="6" sm="2">
                    <MudText>Viện quản lý:</MudText>
                </MudItem>
                <MudItem xs="6" sm="4">
                    <MudText>@Letter.Student.School.Name</MudText>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudAlert Class="ma-auto pa-10">Tài khoản của sinh viên chưa tồn tại trong hệ thống!</MudAlert>
        }

        <MudStack Spacing="1">

            @foreach (var additionalField in Letter?.Template?.AdditionalFields!)
            {
                if (additionalField.FieldType == FieldTypes.Checkbox)
                {
                    <MudText>@additionalField.FieldName</MudText>
                    var childFields = Letter?.Template.AdditionalFields.
                    Where(x => x.GroupFieldId == additionalField.Id);
                    foreach (var child in childFields!)
                    {
                        var letterAdditionalFieldInGroup = this.GetFieldBasedOnLetterTemplate(child.Id);

                        <MudCheckBox T="bool" Size="Size.Medium" Label="@child.FieldName"
                     Disabled="true" Checked="letterAdditionalFieldInGroup.FieldValueBool">

                            @if (child.FieldType == FieldTypes.Text)
                            {
                                <MudText>: @letterAdditionalFieldInGroup.FieldValueString</MudText>
                            }
                            @if (child.FieldType == FieldTypes.Datetime)
                            {
                                <MudText>: @letterAdditionalFieldInGroup.FieldValueDateTime</MudText>
                            }
                        </MudCheckBox>
                    }
                }

                var letterAdditionalField = this.GetFieldBasedOnLetterTemplate(additionalField.Id);

                if (additionalField is { FieldType: FieldTypes.Text, GroupFieldId: null })
                {
                    <MudText>@additionalField.FieldName: @letterAdditionalField.FieldValueString</MudText>
                }
                if (additionalField is { FieldType: FieldTypes.Datetime, GroupFieldId: null })
                {
                    <MudText>@additionalField.FieldName: @letterAdditionalField.FieldValueDateTime.ToIsoDateString()</MudText>
                }
            }
        </MudStack>

        <MudText Typo="Typo.body1" Class="pt-6 pb-2">Ghi chú: @Letter?.Template.Description</MudText>
        @if (Letter?.NoteToStudent is not null)
        {
            <MudText>Ghi chú cho sinh viên: @Letter.NoteToStudent</MudText>
        }
        @if (TokenState.Role == Roles.Manager || TokenState.Role == Roles.SuperManager)
        {
            <br />
            <MudCard>
                <MudCardContent>
                    <MudTextField Class="ma-auto pt-1" T="string" @bind-Value="Letter.NoteToStudent"
                          Label="Ghi chú cho sinh viên">
                    </MudTextField>
                </MudCardContent>
                <MudCardActions>
                    <MudStack Spacing="1" Row="true">
                        <MudButton ButtonType="ButtonType.Button"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto"
                           OnClick="UpdateLetterNoteToStudent">Thêm ghi chú</MudButton>
                        <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Success"
                            OnClick="UpdateState"
                           Disabled="this.Letter?.FinishedDate != null"
                        >
                           
                            Xác nhận hoàn thành
                        </MudButton>
                    </MudStack>
                </MudCardActions>
            </MudCard>
        }
    </MudPaper>
}


@code {
    private Letter? Letter { get; set; }

    [Parameter]
    public string? LetterId { get; set; }

    private string? previousNote;

    protected override async void OnInitialized()
    {
        this.Letter = await Http.GetFromJsonAsync<Letter>($"api/Letters/{LetterId}");
        this.previousNote = this.Letter?.NoteToStudent;
        StateHasChanged();
    }

    private LetterAdditionalField GetFieldBasedOnLetterTemplate(Guid letterTemplateAdditionalFieldGuid)
    {
        var result = Letter?.LetterAdditionalFields.SingleOrDefault(x => x.LetterTemplateAdditionalFieldId == letterTemplateAdditionalFieldGuid);
        if (result is null) return new LetterAdditionalField()
            {
                LetterTemplateAdditionalFieldId = letterTemplateAdditionalFieldGuid
            };
        return result;
    }

    private async Task<bool> UpdateLetterNoteToStudent()
    {
        if (this.Letter is null) return false;
        var updateLetterNoteDto = new UpdateLetterNoteDto()
            {
                LetterId = this.Letter.Id,
                NoteToStudent = this.Letter.NoteToStudent!
            };
        this.previousNote = this.Letter.NoteToStudent;

        var result = await this.Http.PutAsJsonAsync("api/Letters/noteToStudent", updateLetterNoteDto);
        return result.IsSuccessStatusCode;
    }

    private async Task UpdateState()
    {
        if (this.Letter is null) return;

        this.Letter.FinishedDate = DateTime.Now;

        var updateLetterStateDto = new LetterStateDto()
            {
                LetterId = Letter.Id,
                ReceivedDate = Letter.ReceivedDate,
                FinishedDate = Letter.FinishedDate

            };

        var result = await this.Http.PutAsJsonAsync("api/Letters/state", updateLetterStateDto);
        StateHasChanged();
    }

}